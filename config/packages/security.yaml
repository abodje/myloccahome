security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern: ^/api/
            stateless: true
            security: false

        main:
            lazy: true
            provider: app_user_provider

            # Configuration du formulaire de connexion
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: app_dashboard
                enable_csrf: false

            # Configuration de la déconnexion
            logout:
                path: app_logout
                target: app_login

            # Se souvenir de moi
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 semaine en secondes
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: true

    # Hiérarchie des rôles
    role_hierarchy:
        ROLE_TENANT: ROLE_USER
        ROLE_MANAGER: [ROLE_USER, ROLE_TENANT]
        ROLE_ADMIN: [ROLE_MANAGER, ROLE_USER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_MANAGER, ROLE_USER, ROLE_ALLOWED_TO_SWITCH]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Routes publiques
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/inscription, roles: PUBLIC_ACCESS }

        # ⚠️ IMPORTANT : Webhook CinetPay - doit être accessible publiquement (sans authentification)
        - { path: ^/paiement-en-ligne/notification, roles: PUBLIC_ACCESS }
        - { path: ^/paiement-en-ligne/retour, roles: PUBLIC_ACCESS }

        # Routes d'administration - uniquement pour les admins
        - { path: ^/admin, roles: ROLE_ADMIN }

        # Routes de gestion - pour les gestionnaires et admins
        - { path: ^/biens, roles: [ROLE_MANAGER, ROLE_ADMIN] }
        - { path: ^/locataires, roles: [ROLE_MANAGER, ROLE_ADMIN] }
        - { path: ^/contrats, roles: [ROLE_MANAGER, ROLE_ADMIN] }

        # Routes pour les locataires - tous les utilisateurs connectés
        - { path: ^/mes-paiements, roles: ROLE_USER }
        - { path: ^/mes-demandes, roles: ROLE_USER }
        - { path: ^/mes-documents, roles: ROLE_USER }
        - { path: ^/mon-profil, roles: ROLE_USER }
        - { path: ^/comptabilite, roles: ROLE_USER }

        # Dashboard - tous les utilisateurs connectés
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
