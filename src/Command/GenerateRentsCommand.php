<?php

namespace App\Command;

use App\Entity\Lease;
use App\Entity\Payment;
use App\Repository\LeaseRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:generate-rents',
    description: 'G√©n√®re automatiquement les loyers pour tous les contrats actifs',
)]
class GenerateRentsCommand extends Command
{
    public function __construct(
        private LeaseRepository $leaseRepository,
        private EntityManagerInterface $entityManager
    ) {
        parent::__construct();
    }

    protected function configure(): void
    {
        $this
            ->addOption('month', 'm', InputOption::VALUE_REQUIRED, 'Mois √† g√©n√©rer (YYYY-MM)', null)
            ->addOption('months-ahead', null, InputOption::VALUE_REQUIRED, 'Nombre de mois √† g√©n√©rer √† l\'avance', 1)
            ->addOption('company', 'c', InputOption::VALUE_REQUIRED, 'ID de la soci√©t√© (g√©n√®re uniquement pour cette soci√©t√©)', null)
            ->addOption('organization', 'o', InputOption::VALUE_REQUIRED, 'ID de l\'organization (g√©n√®re pour toutes ses soci√©t√©s)', null)
            ->addOption('dry-run', null, InputOption::VALUE_NONE, 'Simulation sans cr√©ation r√©elle')
            ->setHelp(
                'Cette commande g√©n√®re automatiquement les √©ch√©ances de loyer pour tous les contrats actifs.' . PHP_EOL .
                'Par d√©faut, elle g√©n√®re pour le mois suivant.' . PHP_EOL . PHP_EOL .
                'Exemples :' . PHP_EOL .
                '  php bin/console app:generate-rents' . PHP_EOL .
                '  php bin/console app:generate-rents --months-ahead=3' . PHP_EOL .
                '  php bin/console app:generate-rents --month=2026-01' . PHP_EOL .
                '  php bin/console app:generate-rents --company=5' . PHP_EOL .
                '  php bin/console app:generate-rents --organization=2' . PHP_EOL .
                '  php bin/console app:generate-rents --dry-run'
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $monthOption = $input->getOption('month');
        $monthsAhead = (int) $input->getOption('months-ahead');
        $companyId = $input->getOption('company');
        $organizationId = $input->getOption('organization');
        $dryRun = $input->getOption('dry-run');

        $io->title('üè† G√©n√©ration automatique des loyers - LOKAPRO');

        if ($dryRun) {
            $io->warning('üîç MODE SIMULATION - Aucune donn√©e ne sera enregistr√©e');
        }

        // D√©terminer les mois √† g√©n√©rer
        if ($monthOption) {
            try {
                $startMonth = new \DateTime($monthOption . '-01');
            } catch (\Exception $e) {
                $io->error('Format de mois invalide. Utilisez YYYY-MM (ex: 2026-01)');
                return Command::FAILURE;
            }
        } else {
            $startMonth = new \DateTime('first day of next month');
        }

        // Filtrer les contrats par company/organization si sp√©cifi√©
        if ($companyId) {
            $company = $this->entityManager->getRepository(\App\Entity\Company::class)->find($companyId);
            if (!$company) {
                $io->error("Soci√©t√© #{$companyId} introuvable");
                return Command::FAILURE;
            }
            $io->info("üè¢ Filtrage par soci√©t√© : {$company->getName()}");
            $activeLeases = $this->leaseRepository->findBy(['company' => $company, 'status' => 'Actif']);
        } elseif ($organizationId) {
            $organization = $this->entityManager->getRepository(\App\Entity\Organization::class)->find($organizationId);
            if (!$organization) {
                $io->error("Organisation #{$organizationId} introuvable");
                return Command::FAILURE;
            }
            $io->info("üè¢ Filtrage par organization : {$organization->getName()}");
            $activeLeases = $this->leaseRepository->findBy(['organization' => $organization, 'status' => 'Actif']);
        } else {
            // R√©cup√©rer tous les contrats actifs
            $activeLeases = $this->leaseRepository->findByStatus('Actif');
        }

        if (empty($activeLeases)) {
            $io->warning('Aucun contrat actif trouv√©.');
            return Command::SUCCESS;
        }

        $io->info("üìä Contrats actifs trouv√©s : " . count($activeLeases));
        $io->info("üìÖ G√©n√©ration pour {$monthsAhead} mois √† partir de " . $startMonth->format('F Y'));
        $io->newLine();

        $totalGenerated = 0;
        $totalSkipped = 0;
        $details = [];

        foreach ($activeLeases as $lease) {
            $leaseGenerated = 0;
            $leaseSkipped = 0;

            for ($i = 0; $i < $monthsAhead; $i++) {
                $targetMonth = clone $startMonth;
                $targetMonth->modify("+{$i} months");

                $dueDate = clone $targetMonth;
                $dueDate->setDate(
                    $targetMonth->format('Y'),
                    $targetMonth->format('n'),
                    $lease->getRentDueDay() ?? 1
                );

                // ‚ö†Ô∏è V√©rifier que la date est dans la p√©riode du bail
                // Ne pas g√©n√©rer de loyer avant le d√©but du bail
                if ($lease->getStartDate() && $dueDate < $lease->getStartDate()) {
                    $leaseSkipped++;
                    continue; // Passer au mois suivant
                }

                // ‚ö†Ô∏è V√©rifier que la date n'exc√®de pas la fin du bail
                if ($lease->getEndDate() && $dueDate > $lease->getEndDate()) {
                    $leaseSkipped++;
                    if ($i === 0) {
                        $details[] = [
                            'tenant' => $lease->getTenant()->getFullName(),
                            'property' => $lease->getProperty()->getAddress(),
                            'status' => '‚ö†Ô∏è  Bail expir√© le ' . $lease->getEndDate()->format('d/m/Y'),
                            'generated' => 0
                        ];
                    }
                    break; // Arr√™ter pour ce bail
                }

                // üîí S√âCURIT√â RENFORC√âE : V√©rifier si le loyer existe d√©j√† (avec TOUS les crit√®res)
                $existingPayments = $this->entityManager->getRepository(Payment::class)->findBy([
                    'lease' => $lease,
                    'dueDate' => $dueDate,
                    'type' => 'Loyer'
                ]);

                // üö® Si plusieurs paiements existent pour la m√™me date, on alerte
                if (count($existingPayments) > 1) {
                    $io->warning("‚ö†Ô∏è  ANOMALIE: {count($existingPayments)} paiements trouv√©s pour {$lease->getTenant()->getFullName()} - √©ch√©ance {$dueDate->format('d/m/Y')}");
                    $leaseSkipped++;
                    continue; // Passer au suivant sans cr√©er de doublon
                }

                if (empty($existingPayments)) {
                    if (!$dryRun) {
                        $payment = new Payment();
                        $payment->setLease($lease)
                               ->setDueDate($dueDate)
                               ->setAmount($lease->getMonthlyRent())
                               ->setType('Loyer')
                               ->setStatus('En attente')
                               ->setOrganization($lease->getOrganization()) // ‚úÖ Auto-assign organization
                               ->setCompany($lease->getCompany()); // ‚úÖ Auto-assign company

                        $this->entityManager->persist($payment);
                        
                        // üîí Flush imm√©diatement pour garantir l'insertion en base
                        // √âvite les race conditions si la commande est lanc√©e en parall√®le
                        $this->entityManager->flush();
                    }
                    $leaseGenerated++;
                    $totalGenerated++;
                } else {
                    $leaseSkipped++;
                }
            }

            if ($leaseGenerated > 0 || $i === 0) {
                $details[] = [
                    'tenant' => $lease->getTenant()->getFullName(),
                    'property' => $lease->getProperty()->getAddress(),
                    'status' => $leaseGenerated > 0 ? "‚úÖ {$leaseGenerated} loyer(s)" : '‚ûñ D√©j√† g√©n√©r√©s',
                    'generated' => $leaseGenerated
                ];
            }
        }

        // üîí Note: Le flush est fait imm√©diatement apr√®s chaque cr√©ation
        // pour garantir la coh√©rence et √©viter les doublons
        // Plus besoin de flush global ici

        // Afficher les r√©sultats
        $io->section('üìã R√©sultats par contrat');

        if (!empty($details)) {
            $tableData = [];
            foreach ($details as $detail) {
                $tableData[] = [
                    $detail['tenant'],
                    $detail['property'],
                    $detail['status']
                ];
            }

            $io->table(
                ['Locataire', 'Propri√©t√©', 'R√©sultat'],
                $tableData
            );
        }

        $io->section('üìä R√©sum√© global');

        $io->definitionList(
            ['Loyers g√©n√©r√©s' => $totalGenerated],
            ['Contrats trait√©s' => count($activeLeases)],
            ['Mode' => $dryRun ? 'SIMULATION' : 'R√âEL']
        );

        if ($totalGenerated > 0) {
            if ($dryRun) {
                $io->success("‚úÖ {$totalGenerated} loyer(s) seraient g√©n√©r√©s (simulation)");
            } else {
                $io->success("‚úÖ {$totalGenerated} loyer(s) g√©n√©r√©s avec succ√®s !");
            }
        } else {
            $io->info('‚ÑπÔ∏è  Aucun nouveau loyer √† g√©n√©rer. Tous les loyers sont d√©j√† cr√©√©s.');
        }

        return Command::SUCCESS;
    }
}

