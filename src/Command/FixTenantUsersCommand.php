<?php

// Commande pour corriger les utilisateurs tenant sans entit√© Tenant
// √Ä ex√©cuter avec: php bin/console app:fix-tenant-users

namespace App\Command;

use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:fix-tenant-users',
    description: 'Corrige les utilisateurs avec ROLE_TENANT qui n\'ont pas d\'entit√© Tenant associ√©e.',
)]
class FixTenantUsersCommand extends Command
{
    private EntityManagerInterface $entityManager;

    public function __construct(EntityManagerInterface $entityManager)
    {
        parent::__construct();
        $this->entityManager = $entityManager;
    }

    protected function configure(): void
    {
        $this
            ->setDescription('Associe les utilisateurs ROLE_TENANT avec des entit√©s Tenant manquantes')
            ->addOption('dry-run', null, InputOption::VALUE_NONE, 'Affiche ce qui serait fait sans ex√©cuter les modifications')
            ->setHelp('Cette commande trouve les utilisateurs avec le r√¥le ROLE_TENANT qui n\'ont pas d\'entit√© Tenant associ√©e et les cr√©e automatiquement.');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $dryRun = $input->getOption('dry-run');

        $io->title('üîß Correction des utilisateurs Tenant');
        if ($dryRun) {
            $io->note('Mode DRY-RUN : Aucune modification ne sera effectu√©e');
        }

        // Trouver les utilisateurs avec ROLE_TENANT mais sans entit√© Tenant
        $users = $this->entityManager->getRepository(\App\Entity\User::class)
            ->createQueryBuilder('u')
            ->leftJoin('u.tenant', 't')
            ->where('u.roles LIKE :role')
            ->andWhere('t.id IS NULL')
            ->setParameter('role', '%ROLE_TENANT%')
            ->getQuery()
            ->getResult();

        $io->text("Utilisateurs avec ROLE_TENANT sans entit√© Tenant: " . count($users));

        if (empty($users)) {
            $io->success('‚úÖ Tous les utilisateurs tenant ont une entit√© Tenant associ√©e');
            return Command::SUCCESS;
        }

        $io->section('Utilisateurs √† corriger:');
        foreach ($users as $user) {
            $io->text("  - {$user->getEmail()} (ID: {$user->getId()})");
        }

        if (!$io->confirm('Voulez-vous cr√©er des entit√©s Tenant pour ces utilisateurs ?')) {
            $io->text('Op√©ration annul√©e');
            return Command::SUCCESS;
        }

        $created = 0;
        foreach ($users as $user) {
            try {
                // Cr√©er une entit√© Tenant
                $tenant = new \App\Entity\Tenant();
                $tenant->setFirstName($user->getFirstName() ?? 'Pr√©nom');
                $tenant->setLastName($user->getLastName() ?? 'Nom');
                $tenant->setEmail($user->getEmail());
                $tenant->setPhone($user->getMobilePhone() ?? '');
                $tenant->setUser($user);

                // Associer √† l'organisation et la soci√©t√© de l'utilisateur
                if ($user->getOrganization()) {
                    $tenant->setOrganization($user->getOrganization());
                } else {
                    $io->warning("‚ö†Ô∏è Utilisateur {$user->getEmail()} n'a pas d'organisation - tenant cr√©√© sans organisation");
                }
                // Ne pas d√©finir company si elle est null pour √©viter l'erreur de contrainte
                if ($user->getCompany()) {
                    $tenant->setCompany($user->getCompany());
                }

                if (!$dryRun) {
                    $this->entityManager->persist($tenant);
                }
                $created++;

                if ($dryRun) {
                    $io->text("üîç [DRY-RUN] Tenant serait cr√©√© pour {$user->getEmail()}");
                } else {
                    $io->text("‚úÖ Tenant cr√©√© pour {$user->getEmail()}");
                }
            } catch (\Exception $e) {
                $io->error("‚ùå Erreur pour {$user->getEmail()}: " . $e->getMessage());
            }
        }

        if ($created > 0) {
            if (!$dryRun) {
                $this->entityManager->flush();
                $io->success("‚úÖ $created entit√©s Tenant cr√©√©es avec succ√®s");
            } else {
                $io->success("üîç [DRY-RUN] $created entit√©s Tenant seraient cr√©√©es");
            }
        }

        // V√©rifier le calendrier maintenant
        $io->section('Test du calendrier apr√®s correction');

        $testUser = $users[0];
        $tenant = $testUser->getTenant();

        if ($tenant) {
            $io->text("Utilisateur de test: {$testUser->getEmail()}");
            $io->text("Tenant associ√©: {$tenant->getFullName()}");

            // Test des paiements
            $paymentRepo = $this->entityManager->getRepository(\App\Entity\Payment::class);
            $payments = $paymentRepo->findByTenantWithFilters($tenant->getId());
            $io->text("Paiements trouv√©s: " . count($payments));

            // Test des baux
            $leaseRepo = $this->entityManager->getRepository(\App\Entity\Lease::class);
            $leases = $leaseRepo->findBy(['tenant' => $tenant]);
            $io->text("Baux trouv√©s: " . count($leases));

            if (count($payments) > 0 || count($leases) > 0) {
                $io->success('üéâ Le calendrier devrait maintenant fonctionner !');
            } else {
                $io->warning('‚ö†Ô∏è Aucune donn√©e trouv√©e pour ce tenant. V√©rifiez les donn√©es.');
            }
        }

        return Command::SUCCESS;
    }
}
